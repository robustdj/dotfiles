require 'autotest/fsevent'
require 'autotest/timestamp'
require 'autotest/screen'
require 'autotest/restart'
require 'redgreen/autotest'


AUTOTEST_IMAGE_PATH = File.join(File.dirname(__FILE__),".autotest_images")

Autotest.add_hook :initialize do |at|
  %w{.svn .hg .git vendor}.each {|exception| at.add_exception(exception)}
  nil
end

module Autotest::Growl
  def self.growl title, msg, img, pri=0, stick=""
    system "growlnotify -n autotest --image #{img.inspect} -p #{pri} -m #{msg.inspect} #{title.inspect} #{stick}"
  end

  Autotest.add_hook :ran_command do |autotest|
    filtered = autotest.results.grep(/\d+\s.*examples?/)
    output = filtered.empty? ? "" : filtered.last.slice(/(\d+)\s.*examples?,\s(\d+)\s.*failures?(?:,\s(\d+)\s.*pending)?/)

    output,passed,failed,pending = $~.to_a

    if failed.to_i > 0
      cnt = [(9 + failed.to_i) / 10 * 10, 50].min
      growl "Test Results", "#{output}", "#{AUTOTEST_IMAGE_PATH}/fail#{cnt}.png"
    elsif pending.to_i > 0
      growl "Test Results", "#{output}", "#{AUTOTEST_IMAGE_PATH}/pass.png"
    else
      growl "Test Results", "#{output}", "#{AUTOTEST_IMAGE_PATH}/pass.png"
    end
  end
end

