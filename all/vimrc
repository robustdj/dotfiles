  scriptencoding utf-8

" Enable filetype-specific indenting and plugins
  filetype plugin indent on

" Hide buffers instead of abandoning them
  set hidden

" Explicitly set 256 color support
  set t_Co=256

" Change <Leader>
  let mapleader = ","

" Set temporary directory (don't litter local dir with swp/tmp files)
  set directory=/tmp/

" Syntax Highlighting on
  set nocompatible
  syntax on

" Disable blinking cursor
  set gcr=n:blinkon0

" Highlight matching parens
  set showmatch
  "set completeopt=menu,preview

" Use the tab complete menu
  set wildmenu
  set wildmode=list:longest,full

" Enable 256 color mode
  set t_Co=256

" have the mouse enabled all the time:
  set mouse=a

" * Text Formatting -- General

" don't make it look like there are line breaks where there aren't:
  set nowrap

" use indents of 2 spaces, and have them copied down lines:
  set expandtab
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2

  set autoindent

" Set to auto read when a file is changed from the outside
  set autoread

" enable line numbers
  set number
  set numberwidth=3

"folding settings
  set nofoldenable
  set foldmethod=indent
  set foldlevel=1
  set foldnestmax=10

" * File Browsing

" Settings for explorer.vim
  let g:explHideFiles='^\.'

" Enable the tab bar
" set showtabline=1 " 1=only if there are at least two tabs, 2=always

" Make backspace work in insert mode
  set backspace=indent,eol,start

" Remember last position in file
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" Tab navigation
  nmap <leader>tn :tabnext<CR>
  nmap <leader>tp :tabprevious<CR>
  nmap <leader>te :tabedit

" Remap F1 from Help to ESC.  No more accidents
  nmap <F1> <Esc>
  map! <F1> <Esc>

	set splitbelow " Open new horizontal split windows below current
  set splitright " Open new vertical split windows to the right

  " Add RebuildTagsFile function/command
  function! s:RebuildTagsFile()
    !ctags -R --exclude=coverage --exclude=files --exclude=public --exclude=log --exclude=tmp --exclude=vendor *
  endfunction
  command! -nargs=0 RebuildTagsFile call s:RebuildTagsFile()

" Run file with...
  nmap <leader>st :Shell ruby %<CR>

" Title: no title for me
  set notitle

" IRB
  autocmd FileType irb inoremap <buffer> <silent> <CR> <Esc>:<C-u>ruby v=VIM::Buffer.current;v.append(v.line_number, eval(v[v.line_number]).inspect)<CR>
  nnoremap <leader>irb :<C-u>below new<CR>:setfiletype irb<CR>:set syntax=ruby<CR>:set buftype=nofile<CR>:set bufhidden=delete<CR>i

" Turn on language specific omnifuncs
  autocmd FileType ruby set omnifunc=rubycomplete#Complete
  autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
  autocmd FileType css set omnifunc=csscomplete#CompleteCSS
  autocmd FileType c set omnifunc=ccomplete#Complete
  autocmd FileType vim set omnifunc=syntaxcomplete#Complete

" have some fun with bufexplorer
  let g:bufExplorerDefaultHelp=0       " Do not show default help.
  let g:bufExplorerShowRelativePath=1  " Show relative paths.

" Set keyword prog for ruby
  set keywordprg=ri

" search next/previous -- center in page
  nmap n nzz
  nmap N Nzz
  nmap * *Nzz
  nmap # #nzz

" Yank from the cursor to the end of the line, to be consistent with C and D.
  nnoremap Y y$

" Hide search highlighting
  map <silent> <leader>nh :nohls <CR>

" toggle Quickfix window with <leader>q
  map <silent> <leader>q :QFix<CR>

" Make :W write!!!!
  map :W :w

" Git Grep
  map <leader>f :GitGrep<space>

" show the `best match so far' as search strings are typed:
  set incsearch

" Highlight search results once found:
  set hlsearch

" assume the /g flag on :s substitutions to replace all matches in a line:
  set gdefault


" Mappings for align
  vmap <silent> <Leader>i= <ESC>:AlignPush<CR>:AlignCtrl lp1P1<CR>:'<,'>Align =<CR>:AlignPop<CR>
  vmap <silent> <Leader>i, <ESC>:AlignPush<CR>:AlignCtrl lp0P1<CR>:'<,'>Align ,<CR>:AlignPop<CR>
  vmap <silent> <Leader>i( <ESC>:AlignPush<CR>:AlignCtrl lp0P0<CR>:'<,'>Align (<CR>:AlignPop<CR>

" Remap common rubytest keybindings
  map <Leader>rt <Plug>RubyTestRun
  map <Leader>rf <Plug>RubyFileRun
  map <Leader>ff :CtrlP<CR>

" Gist.vim
  let g:gist_clip_command = 'pbcopy'
  let g:gist_detect_filetype = 1
  let g:gist_open_browser_after_post = 1

  set term=xterm

  runtime! statusbar.vim
  runtime! clojure_config.vim
  runtime! nerdtree_config.vim
  runtime! nerdcommenter_config.vim
  runtime! fuzzy_finder_config.vim
  runtime! shell.vim

" ~/.vim/ftdetect/Gemfile.vim
  autocmd BufRead,BufNewFile Gemfile set filetype=Gemfile

" detect handlebars files
  au BufRead,BufNewFile *.handlebars,*.hbs set ft=handlebars

" GetLatestVimScripts
  let g:GetLatestVimScripts_allowautoinstall=1

" Highlight trailing whitespace
  "autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  "autocmd BufRead,InsertLeave * match ExtraWhitespace /\s\+$/

" Set up highlight group & retain through colorscheme changes
  highlight ExtraWhitespace ctermbg=red guibg=red
  autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Highlight too-long lines
  "autocmd BufRead,InsertEnter,InsertLeave * 2match LineLengthError /\%126v.*/
  "highlight LineLengthError ctermfg=red guifg=red
  "autocmd ColorScheme * highlight LineLengthError ctermfg=red guifg=red

" Fuck whitespace
  "autocmd FileType c,cpp,java,php,ruby,eruby,python,html,css,javascript autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))

" Add pathogen dependencies because mixed up stuff is mixed up
  call pathogen#runtime_append_all_bundles()

" For Solarized to work properly
  syntax enable
  if has('gui_running')
    set background=light
  else
    set background=dark
  endif
  set t_Co=256
  let g:solarized_termcolors=16
  colorscheme solarized

  if &term =~ 'xterm'
    " Disable Background Color Erase (BCE) so that color schemes
    "   " work properly when Vim is used inside tmux and GNU screen.
    "     " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=

    highlight Normal ctermbg=black
  endif
" End for Solarized

set runtimepath^=~/.vim/bundle/ctrlp.vim
set transparency=10

let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files\|tmp$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
